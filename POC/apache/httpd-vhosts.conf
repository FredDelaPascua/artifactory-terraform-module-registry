# Virtual Hosts
#
# Required modules: mod_log_config

# If you want to maintain multiple domains/hostnames on your
# machine you can setup VirtualHost containers for them. Most configurations
# use only name-based virtual hosts so the server doesn't need to worry about
# IP addresses. This is indicated by the asterisks in the directives below.
#
# Please see the documentation at 
# <URL:http://httpd.apache.org/docs/2.4/vhosts/>
# for further details before you try to setup virtual hosts.
#
# You may use the command line option '-S' to verify your virtual host
# configuration.

#
# VirtualHost example:
# Almost any Apache directive may go into a VirtualHost container.
# The first VirtualHost section is used for all requests that do not
# match a ServerName or ServerAlias in any <VirtualHost> block.
#
# <VirtualHost *:80>
#     ServerAdmin webmaster@dummy-host.example.com
#     DocumentRoot "/usr/local/apache2/docs/dummy-host.example.com"
#     ServerName dummy-host.example.com
#     ServerAlias www.dummy-host.example.com
#     ErrorLog "logs/dummy-host.example.com-error_log"
#     CustomLog "logs/dummy-host.example.com-access_log" common
# </VirtualHost>

# <VirtualHost *:80>
#     ServerAdmin webmaster@dummy-host2.example.com
#     DocumentRoot "/usr/local/apache2/docs/dummy-host2.example.com"
#     ServerName dummy-host2.example.com
#     ErrorLog "logs/dummy-host2.example.com-error_log"
#     CustomLog "logs/dummy-host2.example.com-access_log" common
# </VirtualHost>
<VirtualHost *:*>
    RewriteEngine on
    # For requests like terraform-registry/v1/modules/example-repo-local/data/aws/0.2.3/download
    RewriteRule ^/terraform-registry/v1/modules/([^/]+)/([^/]+)/([^/]+)/([^/]+)/([^/]+)$ /artifactory/$1/terraform-registry [E=TF_MODULE_NAME:$2,E=TF_MODULE_PROVIDER:$3,E=TF_MODULE_VERSION:$4,E=TF_MODULE_COMMAND:$5,L,PT,E=TF_USE_BASIC_AUTH:1]
    # For requests like terraform-registry/v1/modules/example-repo-local/data/aws/versions
    RewriteRule ^/terraform-registry/v1/modules/([^/]+)/([^/]+)/([^/]+)/([^/]+)$ /artifactory/$1/terraform-registry [E=TF_MODULE_NAME:$2,E=TF_MODULE_PROVIDER:$3,E=TF_MODULE_COMMAND:$4,L,PT,E=TF_USE_BASIC_AUTH:1]
    # Make sure that Bearer -> Basic conversion happens for downloads too
    RewriteRule ^/terraform-registry/download/(.*) /artifactory/$1 [L,PT,E=TF_USE_BASIC_AUTH:1]
    RequestHeader set X-Artifactory-Terraform-Module %{TF_MODULE_NAME}e env=TF_MODULE_NAME
    RequestHeader set X-Artifactory-Terraform-Provider %{TF_MODULE_PROVIDER}e env=TF_MODULE_PROVIDER
    RequestHeader set X-Artifactory-Terraform-Entity-ID %{TF_MODULE_VERSION}e env=TF_MODULE_VERSION
    RequestHeader set X-Artifactory-Terraform-Command %{TF_MODULE_COMMAND}e env=TF_MODULE_COMMAND
    RequestHeader set X-Artifactory-Terraform-Download-Base https://fd8cceb630d6.ngrok.io/terraform-registry/download/ env=TF_USE_BASIC_AUTH

    # TODO: Using https://stackoverflow.com/questions/21032461/how-to-base64-encode-apache-header we might be able to implement base64 here
    # Change Bearer tokens into Basic auth for terraform access
    RequestHeader edit Authorization ^Bearer Basic env=TF_USE_BASIC_AUTH

    ProxyPreserveHost On
    # Servers to proxy the connection, or;
    # List of application servers:
    # Usage:
    # ProxyPass / http://[IP Addr.]:[port]/
    # ProxyPassReverse / http://[IP Addr.]:[port]/
    # Example:
    DocumentRoot "/usr/local/apache2/htdocs"
    ProxyPass "/artifactory"  "http://172.17.0.3:8082/artifactory"
    ProxyPassReverse "/artifactory"  "http://172.17.0.3:8082/artifactory"
    ProxyPass "/ui"  "http://172.17.0.3:8082/ui"
    ProxyPassReverse "/ui"  "http://172.17.0.3:8082/ui"
    # ProxyPass "/.well-known/terraform.json" "http://127.0.0.1:80/"
    # ProxyPassReverse "/.well-known/terraform.json" "http://127.0.0.1:80/"
    ServerName localhost
</VirtualHost>